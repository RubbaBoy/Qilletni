plugins {
    id 'antlr'
    id 'idea'
    id 'maven-publish'
    id 'application'
}

group = 'is.yarr.qilletni'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}

application {
    mainClass = 'is.yarr.qilletni.lang.docs.DocParser'
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // SLF4J API dependency
    implementation 'org.apache.logging.log4j:log4j-api:2.22.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.22.1'

    implementation 'org.antlr:antlr4-runtime:4.13.1'
    antlr 'org.antlr:antlr4:4.13.1'

    implementation 'com.google.code.gson:gson:2.10.1'
    
    implementation 'is.yarr.qilletni.api:qilletni-api:1.0.0-SNAPSHOT'
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}

generateGrammarSource {
        var pkg = 'is.yarr.qilletni.antlr';
        outputDirectory = new File("${project.buildDir}/generated-src/antlr/main/${pkg.split("\\.").join("/")}".toString())
    maxHeapSize = "128m"
    arguments += ['-visitor', '-no-listener']
}

compileJava.dependsOn generateGrammarSource

sourceSets {
    generated {
        java.srcDir 'generated-src/antlr/main/'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    
    repositories {
        mavenLocal()
    }

    java {
        withSourcesJar()
        sourceCompatibility = '20'
        targetCompatibility = '20'
    }
    
    tasks.withType(JavaCompile).each {
        it.options.compilerArgs.add('--enable-preview')
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

tasks.named('sourcesJar').configure {
    dependsOn 'generateGrammarSource'
}

test {
    useJUnitPlatform()
}