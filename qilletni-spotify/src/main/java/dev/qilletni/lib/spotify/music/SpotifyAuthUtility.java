package dev.qilletni.lib.spotify.music;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

public class SpotifyAuthUtility {

    /**
     * Generates a PKCE code verifier.
     * 
     * @param minLength The minimum length, ideally 43
     * @param maxLength The maximum length, ideally 128
     * @return The generated string
     */
    public static String generateCodeVerifier(int minLength, int maxLength) {
        SecureRandom random = new SecureRandom();
        int length = minLength + random.nextInt(maxLength - minLength + 1);

        String allowedChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            int randomIndex = random.nextInt(allowedChars.length());
            sb.append(allowedChars.charAt(randomIndex));
        }
        return sb.toString();
    }

    /**
     * Generated a code challenge based off of a code verifier, generated by {@link #generateCodeVerifier(int, int)}
     * 
     * @param codeVerifier The generated code verifier
     * @return The code challenge string
     */
    public static String generateCodeChallenge(String codeVerifier) {
        byte[] hashedBytes = hashWithSHA256(codeVerifier.getBytes());
        return base64UrlEncode(hashedBytes);
    }

    private static byte[] hashWithSHA256(byte[] input) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            return digest.digest(input);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static String base64UrlEncode(byte[] input) {
        return Base64.getUrlEncoder().withoutPadding().encodeToString(input);
    }
    
}
